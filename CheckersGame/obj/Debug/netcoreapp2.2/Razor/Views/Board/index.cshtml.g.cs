#pragma checksum "C:\Users\cepul\Documents\Visual Studio 2019\Projects\CheckersGame\CheckersGame\Views\Board\index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f6a9d0122c477dd7499ae40d7a8f1cfa779dc216"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Board_index), @"mvc.1.0.view", @"/Views/Board/index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Board/index.cshtml", typeof(AspNetCore.Views_Board_index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f6a9d0122c477dd7499ae40d7a8f1cfa779dc216", @"/Views/Board/index.cshtml")]
    public class Views_Board_index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 74, true);
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
            EndContext();
            BeginContext(74, 68, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f6a9d0122c477dd7499ae40d7a8f1cfa779dc2162973", async() => {
                BeginContext(80, 55, true);
                WriteLiteral("\r\n\r\n    <meta charset=\"utf-8\" />\r\n    <title></title>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(142, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(144, 1510, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f6a9d0122c477dd7499ae40d7a8f1cfa779dc2164216", async() => {
                BeginContext(150, 1497, true);
                WriteLiteral(@"
    <div class=""modal fade"" tableindex=""-1"" role=""dialog"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
                <div class=""modal body"">
                    <h5>GAME OVER</h5>
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" id=""restart"" class=""btn btn-primary"">Restart</button>
                    <button type=""button"" id=""quit"" class=""btn btn-primary"">Quit</button>
                </div>
            </div>
        </div>
    </div>

    <div class=""container"" id=""checkerBoard"">
        <div class=""row"">
            <div class=""board col-md"">
                <canvas id=""board"" width=""400"" height=""400"" style=""border: 1px solid black""></canvas>
            </div>
            <div class=""score col-md"">
                <table class=""table"">
                    <tbody>
                        <tr>
                            <th scope=""row"">Left white checkers</th>
            ");
                WriteLiteral(@"                <td id=""white""> </td>
                        </tr>
                        <tr>
                            <th scope=""row"">Left black checkers</th>
                            <td id=""black""> </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div>
        <button type=""button"" id=""newGame"" class=""btn btn-primary restart"">New game</button>
    </div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1654, 384, true);
            WriteLiteral(@"
</html>
<script src=""https://code.jquery.com/jquery-3.4.0.js""></script>
<script src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"" integrity=""sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"" crossorigin=""anonymous""></script>
<script type=""text/javascript"">
    var game;
    function FunctionGet() {
        game = true;
$.get(""");
            EndContext();
            BeginContext(2039, 24, false);
#line 56 "C:\Users\cepul\Documents\Visual Studio 2019\Projects\CheckersGame\CheckersGame\Views\Board\index.cshtml"
  Write(Url.Action("Get", "Api"));

#line default
#line hidden
            EndContext();
            BeginContext(2063, 3693, true);
            WriteLiteral(@""")
    .done(function (data) {
                            var drawBoard = function (data, id) {
                    var board = document.getElementById(id);
                    var ctx = board.getContext(""2d"");
                    var w = data.length;
                    var h = data[0].length;

                    for (var j = 0; j < w; j++) {

                        for (var i = 0; i < h; i++) {
                            ctx.moveTo(0, j*40);
                            ctx.lineTo(h*40, j*40);
                            ctx.stroke();
                             ctx.moveTo(i*40, 0);
                            ctx.lineTo(i*40, w*40);
                            ctx.stroke();

                            if (data[i][j].squareColor==2  && data[i][j].checkerColor==3) {

                                ctx.fillStyle = ""white"";
                                    ctx.fillRect(40 * j, 40 * i, 40, 40);

                            }
                            else if (data[i][j].checke");
            WriteLiteral(@"rColor == 1 && data[i][j].squareColor == 1) {

                                ctx.fillStyle = ""black"";
                                ctx.fillRect(40 * j, 40 * i, 40, 40);

                                ctx.fillStyle = ""red"";
                                ctx.beginPath();
                                    ctx.arc(j*40+20, i * 40 + 20, 15, 0, 2 * Math.PI);
                                ctx.closePath();
                                ctx.fill();

                            }
                            else if(data[i][j].checkerColor == 2 && data[i][j].squareColor==1) {
                                ctx.fillStyle = ""black"";
                                ctx.fillRect(40 * j, 40 * i, 40, 40);
                                ctx.fillStyle = ""white"";
                                ctx.beginPath();
                                    ctx.arc(j*40+20, i * 40 + 20, 15, 0, 2 * Math.PI);
                                ctx.closePath();
                                ctx.fill();

  ");
            WriteLiteral(@"                          }
                            else if(data[i][j].checkerColor == 3 && data[i][j].squareColor==1){
                                ctx.fillStyle = ""black"";
                                    ctx.fillRect(40 * j, 40 *i, 40, 40);
                }
                        }

                    }
                    };
                    GetBlack();
                        GetWhite();
                    drawBoard(data, ""board"");
                    });

    };

$(document).ready(function () {
        $(""#newGame, #restart"").click(function () {
            Hide();
            FunctionGet();
        });
        $(""#quit"").click(function () {
            window.close();
        });
        FunctionGet();

    Hide();
                       var xFrom;
        var yFrom;
        game = true;
        $(""canvas"").on(""click"", function (e) {
            if (game) {
var elm = $(this)

            if (xFrom == null && yFrom == null) {
                xFrom = Ma");
            WriteLiteral(@"th.floor((e.pageX - elm.offset().left) / 40);
                yFrom = Math.floor((e.pageY - elm.offset().top) / 40);
                if ((xFrom + yFrom) % 2 == 0)

                {
                    xFrom = null;
                    yFrom = null;
                }
            }
            else {
                var xTo = Math.floor((e.pageX - elm.offset().left) / 40);
                var yTo = Math.floor((e.pageY - elm.offset().top) / 40);
                if ((xTo + yTo) % 2 == 0) {
                    xTo = null;
                    yTo = null;
                }
                else { $.post(""");
            EndContext();
            BeginContext(5757, 27, false);
#line 152 "C:\Users\cepul\Documents\Visual Studio 2019\Projects\CheckersGame\CheckersGame\Views\Board\index.cshtml"
                          Write(Url.Action("Update", "Api"));

#line default
#line hidden
            EndContext();
            BeginContext(5784, 3458, true);
            WriteLiteral(@""", {xFrom, yFrom, xTo, yTo })

                    .done(function (data) {
                        var drawBoard = function (data, id) {
                            var board = document.getElementById(id);
                            var ctx = board.getContext(""2d"");
                            var h = data.checkerBoard.length;
                            var w = data.checkerBoard.length;

                            for (var j = 0; j < w; j++) {

                                for (var i = 0; i < h; i++) {
                                    ctx.moveTo(0, j * 40);
                                    ctx.lineTo(h * 40, j * 40);
                                    ctx.stroke();
                                    ctx.moveTo(i * 40, 0);
                                    ctx.lineTo(i * 40, w * 40);
                                    ctx.stroke();

                                    if (data.checkerBoard[i][j].squareColor == 2 && data.checkerBoard[i][j].checkerColor == 3) {

            ");
            WriteLiteral(@"                            ctx.fillStyle = ""white"";
                                        ctx.fillRect(40 * j, 40 * i, 40, 40);

                                    }
                                    else if (data.checkerBoard[i][j].checkerColor == 1 && data.checkerBoard[i][j].squareColor == 1) {

                                        ctx.fillStyle = ""black"";
                                        ctx.fillRect(40 * j, 40 * i, 40, 40);

                                        ctx.fillStyle = ""red"";
                                        ctx.beginPath();
                                        ctx.arc(j * 40 + 20, i * 40 + 20, 15, 0, 2 * Math.PI);
                                        ctx.closePath();
                                        ctx.fill();

                                    }
                                    else if (data.checkerBoard[i][j].checkerColor == 2 && data.checkerBoard[i][j].squareColor == 1) {
                                        ctx.fillStyle = ""blac");
            WriteLiteral(@"k"";
                                        ctx.fillRect(40 * j, 40 * i, 40, 40);
                                        ctx.fillStyle = ""white"";
                                        ctx.beginPath();
                                        ctx.arc(j * 40 + 20, i * 40 + 20, 15, 0, 2 * Math.PI);
                                        ctx.closePath();
                                        ctx.fill();

                                    }
                                    else if (data.checkerBoard[i][j].checkerColor == 3 && data.checkerBoard[i][j].squareColor == 1) {
                                        ctx.fillStyle = ""black"";
                                        ctx.fillRect(40 * j, 40 * i, 40, 40);

                                    }

                                }

                            }

                        };
                        GetBlack();
                        GetWhite();

                        drawBoard(data, ""board"");

                  ");
            WriteLiteral(@"      if (data.state == 1) {
                        GameOver();
                            game = false;
                        }
                    });

                    xFrom = null;
                    yFrom = null;
                }

            }
            }
            else {

            }

        });
});

    function GetWhite() {
        $.get(""");
            EndContext();
            BeginContext(9243, 34, false);
#line 235 "C:\Users\cepul\Documents\Visual Studio 2019\Projects\CheckersGame\CheckersGame\Views\Board\index.cshtml"
          Write(Url.Action("GetWhiteCount", "Api"));

#line default
#line hidden
            EndContext();
            BeginContext(9277, 181, true);
            WriteLiteral("\")\r\n            .done(function (count) {\r\n                document.getElementById(\"white\").innerHTML = count;\r\n            });\r\n    };\r\n\r\n    function GetBlack () {\r\n        $.get(\"");
            EndContext();
            BeginContext(9459, 34, false);
#line 242 "C:\Users\cepul\Documents\Visual Studio 2019\Projects\CheckersGame\CheckersGame\Views\Board\index.cshtml"
          Write(Url.Action("GetBlackCount", "Api"));

#line default
#line hidden
            EndContext();
            BeginContext(9493, 260, true);
            WriteLiteral(@""")
            .done(function (count) {
               document.getElementById(""black"").innerHTML = count;
            })
    };
function GameOver() {
        $("".modal"").show();
    };
 function Hide() {
        $("".modal"").hide();
    };
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
